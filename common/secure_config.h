/**********************************************************************************************************************
 * \file secure_config.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#ifndef SECURE_CONFIG_H
#define SECURE_CONFIG_H

#if defined(__cplusplus)
extern "C" {
#endif

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
/* Number of SWPU configuration */
#define N_FWPU              (2UL)                       /* Number of FWPU */
#define N_ERPU              (0UL)                       /* Number of ERPU */
#define N_EWPU              (0UL)                       /* Number of EWPU */
#define OBJECT_SIZE         (4UL * 4u + N_FWPU *16u + N_ERPU *16u + N_EWPU *16u)

/* SWPU enable and attribute configuration */
#define APP_PROT_ENABLE     (1UL)                       /* Application Protection Enable */
#define APP_PROT_DISABLE    (0UL)                       /* Application Protection Disable */
#define APP_PROT_ALLOW      (1UL)                       /* Access Allow */
#define APP_PROT_PROHIBIT   (0UL)                       /* Access Prohibit */

/* SROM API response */
#define API_RESULT_MASK     (0xF0000000)
#define API_RESULT_SUCCESS  (0xA0000000)

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
/* Application Protection structure */
typedef struct {
    uint32_t reserved0      : 2;                        /* Reserved */
    uint32_t addr30         : 30;                       /* Base address for FWPU */
} APPPROT_FLASH_WRITE_PROT_ADDR_Type;

typedef struct {
    uint32_t regionSize     : 30;                       /* Region size for FWPU */
    uint32_t reserved0      : 1;                        /* Reserved */
    uint32_t enable         : 1;                        /* Enable for FWPU */
} APPPROT_FLASH_WRITE_PROT_SIZE_Type;

typedef struct {
    uint32_t offset         : 16;                       /* Offset address for ERPU/EWPU */
    uint32_t reserved0      : 16;                       /* Reserved */
} APPPROT_EFUSE_PROT_OFFSET_Type;

typedef struct {
    uint32_t regionSize     : 16;                       /* Region size for ERPU/EWPU */
    uint32_t reserved0      : 15;                       /* Reserved */
    uint32_t enable         : 1;                        /* Enable for ERPU/EWPU */
} APPPROT_EFUSE_PROT_SIZE_Type;

typedef struct {
    uint32_t urw            : 1;                        /* User accsee attribute */
    uint32_t prw            : 1;                        /* Privileged accsee attribute */
    uint32_t ns             : 1;                        /* Secure accsee attribute */
    uint32_t reserved0      : 13;                       /* Reserved */
    uint32_t pcMask         : 16;                       /* PC mask setting */
} APPPROT_PROT_ATT_Type;

typedef struct{
    volatile uint32_t                   objSize;        /* Number of configured elements */
    volatile uint32_t                   nFWPU;          /* Number of FWPU objects */
#if N_FWPU >= 1
    APPPROT_FLASH_WRITE_PROT_ADDR_Type  FWPU0Adr;       /* FWPU0 base address */
    APPPROT_FLASH_WRITE_PROT_SIZE_Type  FWPU0Size;      /* FWPU0 region size and enable */
    APPPROT_PROT_ATT_Type               FWPU0SlAtt;     /* FWPU0 slave attribute */
    APPPROT_PROT_ATT_Type               FWPU0MsAtt;     /* FWPU0 master attribute */
#endif
#if N_FWPU >= 2
    APPPROT_FLASH_WRITE_PROT_ADDR_Type  FWPU1Adr;       /* FWPU1 base address */
    APPPROT_FLASH_WRITE_PROT_SIZE_Type  FWPU1Size;      /* FWPU1 region size and enable */
    APPPROT_PROT_ATT_Type               FWPU1SlAtt;     /* FWPU1 slave attribute */
    APPPROT_PROT_ATT_Type               FWPU1MsAtt;     /* FWPU1 master attribute */
#endif
#if N_FWPU >= 3
    APPPROT_FLASH_WRITE_PROT_ADDR_Type  FWPU2Adr;       /* FWPU2 base address */
    APPPROT_FLASH_WRITE_PROT_SIZE_Type  FWPU2Size;      /* FWPU2 region size and enable */
    APPPROT_PROT_ATT_Type               FWPU2SlAtt;     /* FWPU2 slave attribute */
    APPPROT_PROT_ATT_Type               FWPU2MsAtt;     /* FWPU2 master attribute */
#endif
#if N_FWPU >= 4
    APPPROT_FLASH_WRITE_PROT_ADDR_Type  FWPU3Adr;       /* FWPU3 base address */
    APPPROT_FLASH_WRITE_PROT_SIZE_Type  FWPU3Size;      /* FWPU3 region size and enable */
    APPPROT_PROT_ATT_Type               FWPU3SlAtt;     /* FWPU3 slave attribute */
    APPPROT_PROT_ATT_Type               FWPU3MsAtt;     /* FWPU3 master attribute */
#endif
#if N_FWPU >= 5
    APPPROT_FLASH_WRITE_PROT_ADDR_Type  FWPU4Adr;       /* FWPU4 base address */
    APPPROT_FLASH_WRITE_PROT_SIZE_Type  FWPU4Size;      /* FWPU4 region size and enable */
    APPPROT_PROT_ATT_Type               FWPU4SlAtt;     /* FWPU4 slave attribute */
    APPPROT_PROT_ATT_Type               FWPU4MsAtt;     /* FWPU4 master attribute */
#endif
#if N_FWPU >= 6
    APPPROT_FLASH_WRITE_PROT_ADDR_Type  FWPU5Adr;       /* FWPU5 base address */
    APPPROT_FLASH_WRITE_PROT_SIZE_Type  FWPU5Size;      /* FWPU5 region size and enable */
    APPPROT_PROT_ATT_Type               FWPU5SlAtt;     /* FWPU5 slave attribute */
    APPPROT_PROT_ATT_Type               FWPU5MsAtt;     /* FWPU5 master attribute */
#endif
#if N_FWPU >= 7
    APPPROT_FLASH_WRITE_PROT_ADDR_Type  FWPU6Adr;       /* FWPU6 base address */
    APPPROT_FLASH_WRITE_PROT_SIZE_Type  FWPU6Size;      /* FWPU6 region size and enable */
    APPPROT_PROT_ATT_Type               FWPU6SlAtt;     /* FWPU6 slave attribute */
    APPPROT_PROT_ATT_Type               FWPU6MsAtt;     /* FWPU6 master attribute */
#endif
#if N_FWPU >= 8
    APPPROT_FLASH_WRITE_PROT_ADDR_Type  FWPU7Adr;       /* FWPU7 base address */
    APPPROT_FLASH_WRITE_PROT_SIZE_Type  FWPU7Size;      /* FWPU7 region size and enable */
    APPPROT_PROT_ATT_Type               FWPU7SlAtt;     /* FWPU7 slave attribute */
    APPPROT_PROT_ATT_Type               FWPU7MsAtt;     /* FWPU7 master attribute */
#endif
#if N_FWPU >= 9
    APPPROT_FLASH_WRITE_PROT_ADDR_Type  FWPU8Adr;       /* FWPU8 base address */
    APPPROT_FLASH_WRITE_PROT_SIZE_Type  FWPU8Size;      /* FWPU8 region size and enable */
    APPPROT_PROT_ATT_Type               FWPU8SlAtt;     /* FWPU8 slave attribute */
    APPPROT_PROT_ATT_Type               FWPU8MsAtt;     /* FWPU8 master attribute */
#endif
#if N_FWPU >= 10
    APPPROT_FLASH_WRITE_PROT_ADDR_Type  FWPU9Adr;       /* FWPU9 base address */
    APPPROT_FLASH_WRITE_PROT_SIZE_Type  FWPU9Size;      /* FWPU9 region size and enable */
    APPPROT_PROT_ATT_Type               FWPU9SlAtt;     /* FWPU9 slave attribute */
    APPPROT_PROT_ATT_Type               FWPU9MsAtt;     /* FWPU9 master attribute */
#endif
#if N_FWPU >= 11
    APPPROT_FLASH_WRITE_PROT_ADDR_Type  FWPU10Adr;      /* FWPU10 base address */
    APPPROT_FLASH_WRITE_PROT_SIZE_Type  FWPU10Size;     /* FWPU10 region size and enable */
    APPPROT_PROT_ATT_Type               FWPU10SlAtt     /* FWPU10 slave attribute */;
    APPPROT_PROT_ATT_Type               FWPU10MsAtt     /* FWPU10 master attribute */;
#endif
#if N_FWPU >= 12
    APPPROT_FLASH_WRITE_PROT_ADDR_Type  FWPU11Adr;      /* FWPU11 base address */
    APPPROT_FLASH_WRITE_PROT_SIZE_Type  FWPU11Size;     /* FWPU11 region size and enable */
    APPPROT_PROT_ATT_Type               FWPU11SlAtt     /* FWPU11 slave attribute */;
    APPPROT_PROT_ATT_Type               FWPU11MsAtt     /* FWPU11 master attribute */;
#endif
#if N_FWPU >= 13
    APPPROT_FLASH_WRITE_PROT_ADDR_Type  FWPU12Adr;      /* FWPU12 base address */
    APPPROT_FLASH_WRITE_PROT_SIZE_Type  FWPU12Size;     /* FWPU12 region size and enable */
    APPPROT_PROT_ATT_Type               FWPU12SlAtt     /* FWPU12 slave attribute */;
    APPPROT_PROT_ATT_Type               FWPU12MsAtt     /* FWPU12 master attribute */;
#endif
#if N_FWPU >= 14
    APPPROT_FLASH_WRITE_PROT_ADDR_Type  FWPU13Adr;      /* FWPU13 base address */
    APPPROT_FLASH_WRITE_PROT_SIZE_Type  FWPU13Size;     /* FWPU13 region size and enable */
    APPPROT_PROT_ATT_Type               FWPU13SlAtt     /* FWPU13 slave attribute */;
    APPPROT_PROT_ATT_Type               FWPU13MsAtt     /* FWPU13 master attribute */;
#endif
#if N_FWPU >= 15
    APPPROT_FLASH_WRITE_PROT_ADDR_Type  FWPU14Adr;      /* FWPU14 base address */
    APPPROT_FLASH_WRITE_PROT_SIZE_Type  FWPU14Size;     /* FWPU14 region size and enable */
    APPPROT_PROT_ATT_Type               FWPU14SlAtt     /* FWPU14 slave attribute */;
    APPPROT_PROT_ATT_Type               FWPU14MsAtt     /* FWPU14 master attribute */;
#endif
#if N_FWPU >= 16
    APPPROT_FLASH_WRITE_PROT_ADDR_Type  FWPU15Adr;      /* FWPU15 base address */
    APPPROT_FLASH_WRITE_PROT_SIZE_Type  FWPU15Size;     /* FWPU15 region size and enable */
    APPPROT_PROT_ATT_Type               FWPU15SlAtt     /* FWPU15 slave attribute */;
    APPPROT_PROT_ATT_Type               FWPU15MsAtt     /* FWPU15 master attribute */;
#endif

    volatile uint32_t                   nERPU;          /* Number of ERPU objects */
#if N_ERPU >= 1
    APPPROT_EFUSE_PROT_OFFSET_Type      ERPU0Offset;    /* ERPU0 base address offset */
    APPPROT_EFUSE_PROT_SIZE_Type        ERPU0Size;      /* ERPU0 region size and enable */
    APPPROT_PROT_ATT_Type               ERPU0SlAtt;     /* ERPU0 slave attribute */
    APPPROT_PROT_ATT_Type               ERPU0MsAtt;     /* ERPU0 master attribute */
#endif
#if N_ERPU >= 2
    APPPROT_EFUSE_PROT_OFFSET_Type      ERPU1Offset;    /* ERPU1 base address offset */
    APPPROT_EFUSE_PROT_SIZE_Type        ERPU1Size;      /* ERPU1 region size and enable */
    APPPROT_PROT_ATT_Type               ERPU1SlAtt;     /* ERPU1 slave attribute */
    APPPROT_PROT_ATT_Type               ERPU1MsAtt;     /* ERPU1 master attribute */
#endif
#if N_ERPU >= 3
    APPPROT_EFUSE_PROT_OFFSET_Type      ERPU2Offset;    /* ERPU2 base address offset */
    APPPROT_EFUSE_PROT_SIZE_Type        ERPU2Size;      /* ERPU2 region size and enable */
    APPPROT_PROT_ATT_Type               ERPU2SlAtt;     /* ERPU2 slave attribute */
    APPPROT_PROT_ATT_Type               ERPU2MsAtt;     /* ERPU2 master attribute */
#endif
#if N_ERPU >= 4
    APPPROT_EFUSE_PROT_OFFSET_Type      ERPU3Offset;    /* ERPU0 base address offset */
    APPPROT_EFUSE_PROT_SIZE_Type        ERPU3Size;      /* ERPU0 region size and enable */
    APPPROT_PROT_ATT_Type               ERPU3SlAtt;     /* ERPU0 slave attribute */
    APPPROT_PROT_ATT_Type               ERPU3MsAtt;     /* ERPU0 master attribute */
#endif
    volatile uint32_t                   nEWPU;          /* Number of ERPU objects */
#if N_EWPU >= 1
    APPPROT_EFUSE_PROT_OFFSET_Type      EWPU0Offset;    /* EWPU0 base address offset */
    APPPROT_EFUSE_PROT_SIZE_Type        EWPU0Size;      /* EWPU0 region size and enable */
    APPPROT_PROT_ATT_Type               EWPU0SlAtt;     /* EWPU0 slave attribute */
    APPPROT_PROT_ATT_Type               EWPU0MsAtt;     /* EWPU0 master attribute */
#endif
#if N_EWPU >= 2
    APPPROT_EFUSE_PROT_OFFSET_Type      EWPU1Offset;    /* EWPU1 base address offset */
    APPPROT_EFUSE_PROT_SIZE_Type        EWPU1Size;      /* EWPU1 region size and enable */
    APPPROT_PROT_ATT_Type               EWPU1SlAtt;     /* EWPU1 slave attribute */
    APPPROT_PROT_ATT_Type               EWPU1MsAtt;     /* EWPU1 master attribute */
#endif
#if N_EWPU >= 3
    APPPROT_EFUSE_PROT_OFFSET_Type      EWPU2Offset;    /* EWPU2 base address offset */
    APPPROT_EFUSE_PROT_SIZE_Type        EWPU2Size;      /* EWPU2 region size and enable */
    APPPROT_PROT_ATT_Type               EWPU2SlAtt;     /* EWPU2 slave attribute */
    APPPROT_PROT_ATT_Type               EWPU2MsAtt;     /* EWPU2 master attribute */
#endif
#if N_EWPU >= 4
    APPPROT_EFUSE_PROT_OFFSET_Type      EWPU3Offset;    /* EWPU3 base address offset */
    APPPROT_EFUSE_PROT_SIZE_Type        EWPU3Size;      /* EWPU3 region size and enable */
    APPPROT_PROT_ATT_Type               EWPU3SlAtt;     /* EWPU3 slave attribute */
    APPPROT_PROT_ATT_Type               EWPU3MsAtt;     /* EWPU3 master attribute */
#endif
} SFLASH_APP_PROT_Type;

typedef struct
{
    uint32_t resv1      : 8;                            /* */
    uint32_t puId       : 8;                            /* */
    uint32_t puType     : 8;                            /* */
    uint32_t opCode     : 8;                            /* Opecode for ReadSWPU API (0x2C) */
    uint32_t dataAddr;                                  /* */
    uint32_t resv2[2];                                  /* */
} READ_SWPU_ARGS_Type;

typedef struct
{
    uint32_t resv1      : 8;                            /* */
    uint32_t puId       : 8;                            /* */
    uint32_t puType     : 4;                            /* */
    uint32_t control    : 4;                            /* */
    uint32_t opCode     : 8;                            /* Opecode for WriteSWPU API (0x2D) */
    uint32_t dataAddr;                                  /* */
    uint32_t resv2[2];                                  /* */
} WRITE_SWPU_ARGS_Type;

typedef union
{
    READ_SWPU_ARGS_Type     r;
    WRITE_SWPU_ARGS_Type    w;
} API_ARGS_Type;

typedef struct
{
    APPPROT_FLASH_WRITE_PROT_ADDR_Type  slAddress;      /* read only, but should be same as current value when writing */
    APPPROT_FLASH_WRITE_PROT_SIZE_Type  slSize;         /* read only, but should be same as current value when writing */
    APPPROT_PROT_ATT_Type               slAtt;
    APPPROT_PROT_ATT_Type               msAtt;
} RW_SWPU_DATA_Type;

#if defined(__cplusplus)
}
#endif

#endif /* SECURE_CONFIG_H */

/* [] END OF FILE */
